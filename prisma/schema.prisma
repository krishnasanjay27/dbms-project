generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Medicine {
  price                  Int
  medicine_name          String                   @db.VarChar(100)
  Medicine_id            Int                      @id
  PharmacyMedicineStock_ PharmacyMedicineStock_[]
}

model Pharmacy {
  operating_hours        Int
  pharmacy_id            Int                      @id
  pharmacy_contact       String                   @db.VarChar(15)
  pharmacy_name          String                   @db.VarChar(100)
  pharmacy_location      String                   @db.VarChar(100)
  PharmacyMedicineStock_ PharmacyMedicineStock_[]
}

model PharmacyMedicineStock_ {
  stock_id       Int      @id
  selling_price  Int
  stock_quantity Int
  pharmacy_id    Int
  Medicine_id    Int
  Pharmacy       Pharmacy @relation(fields: [pharmacy_id], references: [pharmacy_id], onDelete: NoAction, onUpdate: NoAction, map: "PharmacyMedicineStock__ibfk_1")
  Medicine       Medicine @relation(fields: [Medicine_id], references: [Medicine_id], onDelete: NoAction, onUpdate: NoAction, map: "PharmacyMedicineStock__ibfk_2")

  @@index([Medicine_id], map: "Medicine_id")
  @@index([pharmacy_id], map: "pharmacy_id")
}

model blood_bank {
  bank_id         Int           @id
  blood_bank_name String        @db.VarChar(100)
  location        String        @db.VarChar(100)
  contact         String        @db.VarChar(15)
  blood_stock     blood_stock[]
}

model blood_stock {
  blood_stock_id Int        @id
  blood_group    String     @db.VarChar(3)
  stock_quantity Int
  bank_id        Int
  blood_bank     blood_bank @relation(fields: [bank_id], references: [bank_id], onDelete: NoAction, onUpdate: NoAction, map: "blood_stock_ibfk_1")

  @@index([bank_id], map: "bank_id")
}
